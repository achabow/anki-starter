generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String                @id @default(cuid())
  name                String?
  email               String?               @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                UserRole              @default(USER)
  createdAt           DateTime              @default(now())
  accounts            Account[]
  purchases           Purchase[]
  UserFlashcardResult UserFlashcardResult[]
  subscriptions       UserSubscription?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model UserSubscription {
  id                     String    @id @default(uuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @unique @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @unique @map("stripe_current_period_end")
  user                   User      @relation(fields: [userId], references: [id])
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Subject {
  id          String    @id @default(uuid())
  name        String
  value       String
  description String
  chapters    Chapter[]
}

model Chapter {
  id        String      @id @default(uuid())
  name      String
  subjectId String
  Subject   Subject     @relation(fields: [subjectId], references: [id])
  Flashcard Flashcard[]
}

model Flashcard {
  id        String                @id @default(uuid())
  question  String
  hint      String
  answer    String
  chapterId String
  Chapter   Chapter               @relation(fields: [chapterId], references: [id])
  results   UserFlashcardResult[]
}

model UserFlashcardResult {
  id          String    @id @default(uuid())
  userId      String
  flashcardId String
  result      Result
  Flashcard   Flashcard @relation(fields: [flashcardId], references: [id])
  User        User      @relation(fields: [userId], references: [id])

  @@unique([userId, flashcardId])
}

enum UserRole {
  USER
  ADMIN
}

enum Result {
  VERY_DIFFICULT
  DIFFICULT
  GOOD
  VERY_GOOD
}
